TODO
====

This is just a collection of ideas. Care to comment?

* Translate CME/CMS ERRORs, so that you'll get 
	"Network error: No network service" 
  instead of
	"Network error: 30"

* Query +CMEE, set it to 1 to receive CMS/CME ERROR messages,
  reset it to old value.

* Instead of a fixed waiting time for the modem to find its net
  after unlocking the SIM, poll it regularly until it reports 
  that it has found its net.

* A small GUI, built around tools like zenity, kdialog or xdialog
  or even kommander.

  A first working prototype is available:	kussd.sh
  If you prefer GNOME instead of KDE:		gussd.sh

* Add another option "-v|--verbose", which will query and output
  modem type, net the modem is logged into and other trivia.

* Add support and Makefile targets for RPM packages for
  an even easier installation.

  As of 21.04.2010, DEB support is available!

* Some kind of localisation?
  I'd prefer to keep this little script as selfcontained as possible,
  so I probably won't build some gettext()/.po-file infrastructure.
  But as there are not _that_ many user visible messages, I can
  imagine some internal support for English/German/French/Spanish
  messages. Of course, the actual translation (apart from English
  and German) would have to be done by someone else...

* Check the USSD query for legal characters first: /^\*[0-9*]+#$/

* Some more research: Right now, I deal with USSD queries as 
  "one shot" commands. I send a query, receive an answer and that's 
  it. But my docs suggest that more is possible:

	In case of enabled presentation, a +CUSD (as direct answer
	to a send USSD) is then indicated with:
	+CUSD: <m> [,<str>,<dcs> ]

	<m>
	0:	no further user action required (network initiated
		USSD-Notify, or no further information needed after
		mobile initiated operation)
	1:	further user action required (network initiated
		USSD-Request, or further information needed after
		mobile initiated operation)
	2:	USSD terminated by network
	4:	Operation not supported
	<str> is network string, converted in the selected character set
	<dcs> is the data coding scheme received (GSM TS 03.38).

  As stated above, I don't even check m for different values (which I
  should). Is there anybody out there that knows what this is 
  used for and how it's done?


NOT TO DO
=========

These are things I will *not* consider doing to my poor script:

* Get it to run under Windows.
  There's no shortage of tools for this on Windows; furthermore,
  I have absolutely no experience talking to modems on Windows.
  If someone wants to have a try: Substitute "COMx:" for
  "/dev/ttyUSBx" and go from there.

* Get it to send SMSes, set the modem clock, read phone book entries 
  off the SIM, ...
  All of that _can_ be done, of course, but there are already better
  tools for that available. gsm-ussd is supposed to be a one trick
  pony only! 

Jochen Gruse


Jochen
